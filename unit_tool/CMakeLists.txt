cmake_minimum_required(VERSION 3.8)
project(f2-nerf-unit_tool)

include(CheckLanguage)
check_language(CUDA)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-w)
endif()

###############################################################################
# setup for F2-NeRF start
###############################################################################
set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_EXTENSIONS OFF)
set(CUDA_LINK_LIBRARIES_KEYWORD PUBLIC)
set(ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../")
message(STATUS "ROOT_DIR: ${ROOT_DIR}")

add_definitions(-DHALF_PRECISION)

# tiny-cuda-nn
add_definitions(-DJSON_HAS_CPP_14)
set(TCNN_BUILD_BENCHMARK OFF)
set(TCNN_BUILD_EXAMPLES OFF)
add_subdirectory(${ROOT_DIR}/External/tiny-cuda-nn ${CMAKE_CURRENT_BINARY_DIR}/tiny-cuda-nn)
include_directories(${TCNN_INCLUDE_DIRECTORIES})
include_directories(${ROOT_DIR}/External/tiny-cuda-nn/include)
include_directories(${ROOT_DIR}/External/tiny-cuda-nn/dependencies)

set(CMAKE_CUDA_ARCHITECTURES ${TCNN_CUDA_ARCHITECTURES})
set_property(GLOBAL PROPERTY CUDA_ARCHITECTURES ${TCNN_CUDA_ARCHITECTURES})

# zlib, for compiling cnpy
find_package(ZLIB REQUIRED)
include_directories(${ZLIB_INCLUDE_DIRS})

# Libtorch
set(CMAKE_PREFIX_PATH ${DCMAKE_PREFIX_PATH}$ ${ROOT_DIR}/External/libtorch/)
find_package(Torch REQUIRED PATHS ${ROOT_DIR}/External/libtorch NO_DEFAULT_PATH)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")
link_directories(${ROOT_DIR}/External/libtorch/lib/)
include_directories(${TORCH_INCLUDE_DIRS})

# YAML
add_subdirectory(${ROOT_DIR}/External/yaml-cpp ${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp)
include_directories(${ROOT_DIR}/External/yaml-cpp/include)

# eigen
include_directories(${ROOT_DIR}/External/eigen-3.4.0)

# OpenCV
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})

# GTSAM
find_package(GTSAM REQUIRED)

set(ALL_LIBS ${TORCH_LIBRARIES}
             ${TORCH_CUDA_LIBRARIES}
             ${ZLIB_LIBRARIES}
             ${OpenCV_LIBS}
             yaml-cpp
             fmt::fmt
             tiny-cuda-nn
             stdc++fs
             gtsam)

set(PROJECT_SOURCE_DIR ${ROOT_DIR})
include(${ROOT_DIR}/src/Field/field.cmake)
include(${ROOT_DIR}/src/Dataset/dataset.cmake)
include(${ROOT_DIR}/src/PtsSampler/pts_sampler.cmake)
include(${ROOT_DIR}/src/Renderer/renderer.cmake)
include(${ROOT_DIR}/src/Shader/shader.cmake)
include(${ROOT_DIR}/src/Utils/utils.cmake)

list(APPEND SRC_ALL
        ${SRC_FIELD}
        ${SRC_DATASET}
        ${SRC_GEOMETRY}
        ${SRC_PTS_SAMPLER}
        ${SRC_RENDERER}
        ${SRC_SHADER}
        ${SRC_UTILS})
set(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

message(STATUS "SRC_ALL: ${SRC_ALL}")

###############################################################################
# setup for F2-NeRF end
###############################################################################

add_executable(f2-nerf_unit_tool src/main.cpp
                                 ../ros2/src/ros2-f2-nerf/src/localizer_core.cpp
                                 ${SRC_ALL}
)
target_link_libraries(f2-nerf_unit_tool ${ALL_LIBS})
